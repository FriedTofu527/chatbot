<frequently_asked_questions>
    <question_and_answer>
        <question>CACC 中文学校与 X-Camp 合作开设计算机编程课程</question>
        <answer>
            <answer_text>CACC Chinese School cooperates with X-Camp to offer computer programming courses, systematically teaching Python language and core algorithms to prepare students for the United States Information Olympiad (USACO) in high school. USACO Competition Introduction: https://usaco.org/index.php?page=resources. X-Camp Introduction: X-Camp Academy is a programming education institution located in Silicon Valley, from zero foundation to data structure and algorithm training in programming learning, helping students to succeed in heavyweight competitions such as USACO (United States Computer Olympiad). As a leader in K12 programming education in Silicon Valley, X-Camp focuses on programming education and Olympiad training for teenagers, and has rich experience in participating in various computer competitions, including pre-competition training and simulation competitions. In the 8 years since its establishment, more than 300 X-Camp students have reached the USACO Silver level and above, of which more than 70 have reached the Platinum level, 35 have been selected for the US and Canadian national training teams, 15 (14 US + 1 Canadian) have been selected for the latest season in 2024, 1 has won the 2023 European Women's Informatics Olympiad gold medal, and 1 has won the 2024 International Informatics Olympiad gold medal. Learning ladder: Students in grades 5 and 6 can start with the "CS-100 Artificial Intelligence Language Foundation and Visualization Practice" course in the fall semester of 2025. This course does not require students to have a programming foundation. Then continue to study the "CS-101 AI Language Core Foundation" course in the fall of 2026. Students in grade 7 or students in grade 5 or 6 who have a programming background can start with the course "CS-101 AI Language Core Foundations" in the fall semester of 2025, and then continue to study "CS-102 Basic Computer Algorithms and Computational Structures" in the spring of 2026. In class, teachers will not only teach knowledge, but also lead students to do a lot of exercises to help understand and remember the key points of learning. By completing practical projects, students will gain a sense of accomplishment and guide them to continue learning, laying a solid foundation for participating in the USACO competition in the future.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>AI Language Foundation with Visualization Applications (人工智能语言基础和可视化实践)</question>
        <answer>
            <answer_text>X-Camp CS100 - AI Language Foundation with Visualization Applications (Fall Semester) Course Objectives: This course is designed to help students easily begin learning the language for AI programming, sparking creativity and logical thinking through practical visualization projects. Students will start from the basics of Python, mastering core programming skills, and applying their knowledge in engaging AI projects. The course lays a solid foundation for further exploration of Python, other programming languages and AI. Course Content: Learn the basic syntax and core concepts of Python, such as variables, data types, loops, conditional statements, and functions. Each class involves hands-on visualization practices, where students use Python to create drawings of varying complexity, including animations and games. In the final phase, students will form small groups of 2-3 to complete an AI project, produce a video, and participate in a competition for outstanding projects. Target Audience: Students in 5th-6th graders. No prior programming or math knowledge is required. Course Duration: CS100 - Python consists of 15 weeks in total (30 hours classes including practices).</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>AI Core Language Foundation (AI 语言核心基础教程)</question>
        <answer>
            <answer_text>X-Camp CS101 - AI Core Language Foundation (Fall Semester) Course Objectives: X-Camp CS101 is a core foundational Python language course aimed at helping students learn essential Python language. Through extensive practice, students will become familiar with and adept at using Python, enhancing their abilities to analyze and solve problems as well as improve their logical thinking skills. This course establishes a solid foundation for subsequent in-depth studies of Python data structures, algorithms, other programming languages and AI. Course Content: Learn the core syntax and concepts of Python, including variables, data types, loops, conditional statements, functions, coding standards, lists, the Python standard library, and how to debug code. Each class session, as well as after class, students are given extensive exercises to help them write Python code more quickly and accurately. At the end of the course, there is an optional AI project to help students understand the practical AI applications of Python programming. Target Audience: Students in grade 5 or above are eligible. 5th-6th graders must have completed CS100 AI Language Foundation with Visualization Applications. 7th graders and above. Course Duration: There are two sections of the CS101 class, both offering the same content and curriculum. Fall Semester: 30 classes over 15 weeks. Spring Semester: 32 classes over 16 weeks. The Fall and Spring semesters cover the same course content and require separate registration. Students may choose to enroll in either the Fall or Spring course based on their schedule and progress.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Fundamental Algorithms and Data Structures in Python (计算机基础算法和数据结构)</question>
        <answer>
            <answer_text>X-Camp CS102 - Fundamental Algorithms and Data Structures in Python (Spring Semester) Course Objectives: CS102 covers fundamental algorithms and data structures for information manipulation. Students will learn to apply data structures and sorting algorithms commonly used in computer science academia and industry to explore, analyze and present data. Course Content: CS102 delivers a hands-on, Python-based foundation in fundamental data structures and algorithms: you'll master list operations and list comprehensions for efficient sequence handling, explore string manipulation and encoding principles—including the role of ASCII—and implement classic sorting methods (bubble, selection, and merge sort) to appreciate algorithmic trade-offs. From there, you'll work with two-dimensional arrays in our Introduction to Matrices module and apply matrix operations to real-world problems, then dive deep into Functions—covering definition, parameters, return values, best practices, variable scope and higher-order uses—to structure complex programs. Target Audience: Students must have completed X-Camp CS101. Course Duration: CS102 consists of 16 weeks (32 classes)</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>About the Teacher, Ping Zhang</question>
        <answer>
            <answer_text>The following classes are taught by Ping Zhang: Introduction to Physics (基础物理学), ACSL Elementary Division and Python Programming, and ACSL Junior Division and Python Programming. Mr. Zhang holds a Ph.D. degree in Physical and Computational Chemistry and a MS degree in Computer and Information Science, both from the Ohio State University. He also has a BS degree in Materials Science and Engineering from the University of Science and Technology of China. He can bring a strong analytical and problem-solving background to the classroom. While not a traditional educator by training, his extensive research experience has equipped him with the skills to understand complex problems and develop effective solutions—skills that are directly applicable to teaching. Mr. Zhang's passion for learning and sharing knowledge inspired him to teach Python programming and Physics. His classes will emphasize logical thinking, thorough comprehension of the concepts and step-by-step problem solving—key elements for success in the American Computer Science League (ACSL) competitions and general STEM studies. In his classes, students will benefit from his ability to break down challenging concepts and guide them through both the theoretical and practical aspects of the subjects. With a research-driven mindset and a commitment to student growth, he will aim to help each learner build confidence, skill, and a love for programming and science. You can learn more about Mr. Zhang's background on his LinkedIn profile.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Introduction to Physics (基础物理学)</question>
        <answer>
            <answer_text>Target Audience: Middle school students and high school freshmen with minimum physics exposure (only topics covered in the integrated physical science curriculum in California for middle school). Format: Each in-class session includes concept introduction and detailed explanations. Homework will be handled out for each session. Prerequisites: Basic math, middle school level algebra (pre-algebra/early algebra skills). Overview: This course introduces middle school and high school freshmen to the fundamentals of physics through concepts with some amount of mathematics. Covering kinematics, forces, energy, waves, thermodynamics, electricity and magnetism with a strong emphasis on mathematical foundations. Objective &amp; Outcomes: Develop a solid conceptual understanding of physics principles, from motion to electricity, through intuitive explanations and real-world applications. Foster curiosity and confidence in problem-solving by connecting physics to everyday experiences (e.g., sports, games). Prepare students for future physics and other STEM studies. Textbook: For teacher's reference only, "Conceptual Physics" by Paul G. Hewitt (non mathematical, concept-first ) and "Physics: Principles with Applications" by Douglas Giancoli (a complementary book that adds more mathematical rigor). Students do not need to buy a textbook. Tools &amp; Materials: Handouts with key terms, equations and problem sets. Use of AI chatbots is strongly encouraged.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>ACSL Elementary Division and Python Programming</question>
        <answer>
            <answer_text>Target Audience: Grades 3-6. Format: Use slides, worksheets, Python IDEs, and AI ChatBots. Prerequisites: Basic computer skills, math helpful. Overview: This course prepares students for the ACSL Elementary Division contests while introducing Python programming (Beginner Level). Students master four ACSL topics—Number Systems, Prefix/Infix/Postfix Notation, Elementary Boolean Algebra, and Graph Theory—through practice questions and learn Python basics (variables, loops, functions) to reinforce concepts and build coding skills. Ideal for beginners, the class blends logic and creativity to spark a love for computer science. Objectives: Excel in ACSL contests (binary conversions, logic tables, graphs). Learn Python fundamentals and apply them to ACSL ideas. Develop problem-solving and critical thinking. Outcomes: Ready for ACSL contests and future Divisions. Confident in Python basics, prepared for more coding. Stronger logical reasoning and creativity. A completed project each student will demo at the end of the course. Materials: Handouts, ACSL worksheets, Python templates, draw and graphic packages such as Pygame, Turtle, etc. Approach: Fun, supportive lessons with visuals, games, and projects. For example, play a few notes of “Mary had a little Lamb”, “E D C D E E E…”, draw simple shapes and animal figures.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>ACSL Junior Division and Python Programming</question>
        <answer>
            <answer_text>Target Audience: Middle school and grade 9 high school students with some coding experience. Format: use slides, worksheets, Python IDEs, and AI ChatBots. Prerequisites: Basic programming knowledge and computer skills, math helpful Overview &amp; Objective: Prepare for the ACSL Junior Division while mastering Python (Intermediate Level) in this course. Designed for students familiar with basic programming knowledge, such as variables, loops, and functions. This course builds skills in ACSL topics like prefix/infix/postfix notation, Boolean algebra (including De Morgan’s Law), bit-string flicking, recursion, number systems, graph theory, and digital electronics. Through weekly Python coding, ACSL-style problems, and mock contests, students will excel in all four ACSL contests. Gain problem-solving confidence and a strong CS foundation! Outcomes: Excel in ACSL contests, both short answer test and programming problems. Confident in Python both basics and advanced concepts. A completed project each student will demo at the end of the course. Materials: Handouts, ACSL worksheets, Python templates. Approach: Engaging lessons with visuals, coding challenges, and real-world applications, such as data plotting and numerical analysis using python packages, such as Matplotlib, NumPy, etc.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Mr. Ye / Lego Class Material 叶俊老师 / 乐高课程材料配备</question>
        <answer>
            <answer_text>The following classes are taught by Mr. Ye: Lego Robotics Programming Beginner (乐高机器人入门), Lego Robotics Programming Advanced Class (乐高机器人中级提高班), and Lego Robotics / First Lego League Competition (乐高竞赛队).Mr. Ye has more than 30 years software engineering experience. He is an expert in Lego Robotics Programming. He has taught the LEGO Mindstorms programming for many years, and has guided students to First Lego League competition since 2010. This course is offered at 3 levels: Lego Robotics Programming Beginner, Lego Robotics Programming Advanced Class, and Lego Robotics / First Lego League Competition. Lego Robotics will teach core computer programming logic and reasoning skills using a robotics engineering context. It provides hands on activities on structured sequence of programming in a real-world environment. Materials: LEGO® Education SPIKE™ Prime Set, LEGO® Education SPIKE™ Prime Expansion Set (Recommend for Advanced class and Competition class.), Windows PC or Mac PC (Tablet can be used in beginner class only, as the advanced commands not available in iPad or Android Tablet). Important Note: The material mandated in this class is a little bit expensive. Students can purchase used spike prime set from previous students. If you wish CACC School to help, we will be happy to do so. Please email to cs@caccusa.org.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Lego Robotics Programming Beginner (乐高机器人入门)</question>
        <answer>
            <answer_text>This class will teach basic concepts of programming using commands and sequence of commands. There are about 10 projects over the school year. Each project will use robot to demo one mission. These projects are designed to train students thinking about the patterns and structures. Students are not required to have any prior Lego Robotic experience</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Lego Robotics Programming Advanced Class (乐高机器人中级提高班)</question>
        <answer>
            <answer_text>Prerequisite: Completed Beginner or previous Lego programming experience using loops, switches, sensor blocks; Class Content: This course will cover Lego robotic competition concepts. It will teach students how to solve the complex missions with multiple stages as a team (4 to 6 students) throughout the school year. Students will be presented about 20 missions in the beginning, then will learn planning strategies, model building, advanced programming, workload distribution, teamwork, and most importantly, self-learning skills. **We will use the First Lego League field challenge set from previous year's tournament for the missions.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Lego Robotics / First Lego League Competition (乐高竞赛队)</question>
        <answer>
            <answer_text>Prerequisite: Completed Beginner class or previous lego programming experience using loops, switches, sensor blocks; Students need to be 9 to 15 years old at 1/1/2025. Class Content: This course will be a student-led, multiple-hour hands-on class.(One hour before and one after the lecture class are self practice time, students are encouraged to participate.) Two to ten students will form a team and register for the current season of the First LEGO League competition. Students will use their knowledge and experience to identify a world-class issue based on a given theme, then conduct research to present a solution. Students will design, build, and program their own robot to take on the competition's missions. Students will practice and learn the fundamentals of the First Lego League contest. FLL will release the competition's theme in May. Students need to start to work on project assignments during the summer. Besides the class, each team needs to have a self-organized meeting for another two hours after class. Any Lego robotic set made by Lego (such as: Lego Mindstorms Education EV3 Core Set/Expansion set; Lego Education SPKIE Prime set/Expansion set etc.) can be used in competition. As only one robot will be allowed during competition, the team needs to make a decision which one to use.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Scratch (Scratch 程序语言)</question>
        <answer>
            <answer_text>Instructor: Ms. Willa Lin holds a Master's degree in Computer Science from Syracuse University in New York and has nearly ten years of teaching experience. Scratch is a free, and block-based visual programming language designed especially for elementary and middle school students. As the world's largest coding community for children, Scratch offers a fun and accessible way for young learners to create interactive stories, games, and animations. Developed by the MIT Media Lab, Scratch can be accessed and downloaded for free at http://scratch.mit.edu. Scratch supports the development of computational thinking and problem-solving skills, encourages creativity and collaboration, and promotes equity in computing. What we teach: In this course, students will learn to create their own interactive stories, games, and animations using Scratch. They will explore how to use function blocks in different scenarios, practice basic graphing skills, understand programming logic and conditional variables, and build hierarchical coding structure. Through hands-on projects, students develop creative thinking, systematic reasoning, and team work skills. Who may enroll: Students at regular school grade levels of 2 to 6 with basic computer skills. Note: Bring your own Chromebook or laptop, homework is about 1.5 hrs per week.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Digital Art for Kids and Teens (儿童数码绘画)</question>
        <answer>
            <answer_text>Start exploring digital art and discover unlimited creative potential! Beginners will have the opportunity to learn new skills, understand the step-by-step fundamentals of Procreate to create illustrations and animations, and most importantly, have fun! With help from their teacher, students will utilize their devices to create art in a variety of different styles, including watercolor, oil, pastel, Chinese ink, and more. They will learn the basics of digital design, scene construction, and material and texture skills, helping them to explore the infinite possibilities of digital art. Click to view sample projects: https://drive.google.com/drive/folders/11frx0xDc3nFUH0X9_-DmXuW6pJx6IjII?usp=sharing. Materials: Apple iPad, Apple Pencil (make sure your iPad and Apple Pencil are compatible, a compatibility list is included below): Procreate for iPad ($12.99 from App Store, see details: https://apps.apple.com/us/app/procreate/id425073498). Choose your Apple Pencil: Use Apple Pencil Pro with the following iPad models: iPad Pro 13-inch (M4), iPad Pro 11-inch (M4), iPad Air 13-inch (M2), iPad Air 11-inch (M2). (recommended) Use Apple Pencil (2nd generation) with the following iPad models: iPad mini (6th generation), iPad Air (4th or 5th generation), iPad Pro 12.9-inch (3rd, 4th, 5th, or 6th generation), iPad Pro 11-inch (1st, 2nd, 3rd, or 4th generation). Use Apple Pencil (1st generation) with the following iPad models: iPad mini (5th generation), iPad (6th, 7th, 8th or 9th generation), iPad (10th generation), iPad Air (3rd generation), iPad Pro 12.9-inch (1st or 2nd generation), iPad Pro 10.5-inch, or iPad Pro 9.7-inch. Mrs. Bonnie has more than 17 years of art teaching experience at universities and art schools. She teaches and designs for a variety of industries. Her areas of expertise include product design, graphic design, illustration, advertising, and animation.</answer_text>
        </answer>
    </question_and_answer>
    <question_and_answer>
        <question>Digital Illustration (数码插画设计)</question>
        <answer>
            <answer_text>This course is designed to help students transition from imitation to original creation, empowering them to express their own ideas through digital art. With the flexibility and efficiency of digital tools, students will quickly grasp essential artistic knowledge and techniques. Topics include perspective theory and dynamic figure design. Students will learn how to brainstorm concepts, develop compositions, sketch drafts, apply color schemes, and render different material textures. They will also explore how to enhance their artwork with atmospheric lighting and shading, ultimately completing a vibrant, original digital illustration. Combining lectures with hands-on practice, this course will help students elevate their artistic ability and help them discover and shape their own creative style, unleashing imagination and artistic freedom. Click to view sample projects: https://drive.google.com/drive/folders/1RBFivFMA8Q1q8rbpepmtITA53nlq_3sI. Materials: Apple iPad, Apple Pencil (make sure your iPad and Apple Pencil are compatible, a compatibility list is included below): Procreate for iPad ($12.99 from App Store, see details: https://apps.apple.com/us/app/procreate/id425073498). Choose your Apple Pencil: Use Apple Pencil Pro with the following iPad models: iPad Pro 13-inch (M4), iPad Pro 11-inch (M4), iPad Air 13-inch (M2), iPad Air 11-inch (M2). (recommended) Use Apple Pencil (2nd generation) with the following iPad models: iPad mini (6th generation), iPad Air (4th or 5th generation), iPad Pro 12.9-inch (3rd, 4th, 5th, or 6th generation), iPad Pro 11-inch (1st, 2nd, 3rd, or 4th generation). Use Apple Pencil (1st generation) with the following iPad models: iPad mini (5th generation), iPad (6th, 7th, 8th or 9th generation), iPad (10th generation), iPad Air (3rd generation), iPad Pro 12.9-inch (1st or 2nd generation), iPad Pro 10.5-inch, or iPad Pro 9.7-inch. Mrs. Bonnie has more than 17 years of art teaching experience at universities and art schools. She teaches and designs for a variety of industries. Her areas of expertise include product design, graphic design, illustration, advertising, and animation.</answer_text>
        </answer>
    </question_and_answer>
</frequently_asked_questions>